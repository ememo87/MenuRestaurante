package dao.com.co.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dao.com.co.greendao.Details;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DETAILS.
*/
public class DetailsDao extends AbstractDao<Details, Long> {

    public static final String TABLENAME = "DETAILS";

    /**
     * Properties of entity Details.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_details = new Property(1, String.class, "id_details", false, "ID_DETAILS");
        public final static Property Item_subcategory_id = new Property(2, String.class, "item_subcategory_id", false, "ITEM_SUBCATEGORY_ID");
        public final static Property Name_details = new Property(3, String.class, "name_details", false, "NAME_DETAILS");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property UrlImage_items = new Property(5, String.class, "urlImage_items", false, "URL_IMAGE_ITEMS");
        public final static Property UrlImage_left = new Property(6, String.class, "urlImage_left", false, "URL_IMAGE_LEFT");
        public final static Property UrlImage_right = new Property(7, String.class, "urlImage_right", false, "URL_IMAGE_RIGHT");
    };


    public DetailsDao(DaoConfig config) {
        super(config);
    }
    
    public DetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DETAILS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_DETAILS' TEXT NOT NULL ," + // 1: id_details
                "'ITEM_SUBCATEGORY_ID' TEXT NOT NULL ," + // 2: item_subcategory_id
                "'NAME_DETAILS' TEXT NOT NULL ," + // 3: name_details
                "'DESCRIPTION' TEXT NOT NULL ," + // 4: description
                "'URL_IMAGE_ITEMS' TEXT NOT NULL ," + // 5: urlImage_items
                "'URL_IMAGE_LEFT' TEXT NOT NULL ," + // 6: urlImage_left
                "'URL_IMAGE_RIGHT' TEXT NOT NULL );"); // 7: urlImage_right
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DETAILS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Details entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getId_details());
        stmt.bindString(3, entity.getItem_subcategory_id());
        stmt.bindString(4, entity.getName_details());
        stmt.bindString(5, entity.getDescription());
        stmt.bindString(6, entity.getUrlImage_items());
        stmt.bindString(7, entity.getUrlImage_left());
        stmt.bindString(8, entity.getUrlImage_right());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Details readEntity(Cursor cursor, int offset) {
        Details entity = new Details( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // id_details
            cursor.getString(offset + 2), // item_subcategory_id
            cursor.getString(offset + 3), // name_details
            cursor.getString(offset + 4), // description
            cursor.getString(offset + 5), // urlImage_items
            cursor.getString(offset + 6), // urlImage_left
            cursor.getString(offset + 7) // urlImage_right
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Details entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_details(cursor.getString(offset + 1));
        entity.setItem_subcategory_id(cursor.getString(offset + 2));
        entity.setName_details(cursor.getString(offset + 3));
        entity.setDescription(cursor.getString(offset + 4));
        entity.setUrlImage_items(cursor.getString(offset + 5));
        entity.setUrlImage_left(cursor.getString(offset + 6));
        entity.setUrlImage_right(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Details entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Details entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
